-------------------------------------------------------------------------------
--
-- Title       : HalfDevider
-- Design      : RadioCommunication
-- Author      : Jakub Brzezowski
-- Company     : AGH
--
-------------------------------------------------------------------------------
--
-- File        : H:\PSC\Projekt\Radio_Transmission\Radio\src\PISO.vhd
-- Generated   : Thu Dec 13 12:40:02 2018
-- From        : interface description file
-- By          : Itf2Vhdl ver. 1.22
--
-------------------------------------------------------------------------------
--
-- Description : Driver controling transmision speed and distribuated signal to Manchester encoding. 
-- Notes:
-- 
-- Port Description :
-- Inputs:
-- CLK - Clock signal.
-- CE - Clock enable signal.
-- CLR - Reset signal.
-- Outputs:
-- DataSpeed - 100kHz signal to control data transmision speed.
-- ManEdge - Signal used in Manchester decoding.
-- ManEncode - Signal used in Manchester encoding.
-- LoadControl - Signal used to reloading registers in PISO and Particer.
--
-------------------------------------------------------------------------------

-- Libraries attaching: 
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.STD_LOGIC_UNSIGNED.all;

-- Port definition:
entity Half_Devider is
	port(
		CLK :         in  STD_LOGIC;
		CE :          in  STD_LOGIC;
		CLR : 	      in  STD_LOGIC;
		DataSpeed :   out STD_LOGIC;
		ManEdge :     out STD_LOGIC;
		ManEncode :   out STD_LOGIC;
		LoadControl : out STD_LOGIC
		);
end Half_Devider;

-- Architecture description:
architecture behavioral of Half_Devider is	
	signal Div_Vector1 : STD_LOGIC_VECTOR (9 downto 0);
	signal Div_Vector2 : STD_LOGIC_VECTOR (10 downto 0);
	signal Div_Vector3 : STD_LOGIC_VECTOR (13 downto 0);
	
	constant SmallDivider: integer := 500;
	constant MediumDivider: integer := 1000;
	constant BigDivider: integer := 8000;
begin 
	
--200kHz signal creating(One clock cycle)	
process(CLK,CLR)
begin
	if CLR = '1' then
		Div_Vector1 <= (others=>'0');
	elsif CLK'event and CLK = '1' then
		if CE ='1' then
			if Div_Vector1 = (SmallDivider -1) then
				Div_vector1<=(others=>'0');
			else
				Div_vector1<=Div_vector1 +1;
			end if;
		end if;
	end if;
end process;  	
	
ManEdge<= '1' when Div_vector1 =(SmallDivider -1) and CE = '1' else '0';
		
--100kHz signal creating.(50% fill and one clock cycle)	
process(CLK,CLR)
begin
	if CLR = '1' then
		Div_Vector2 <= (others=>'0');
	elsif CLK'event and CLK = '1' then
		if CE ='1' then
			if Div_Vector2 = (MediumDivider -1) then
				Div_vector2<=(others=>'0');
			else
				Div_vector2<=Div_vector2 +1;
			end if;
		end if;
	end if;
end process;
	
ManEncode<= '1' when Div_vector2 >(MediumDivider / 2) and CE = '1' else '0';
DataSpeed<= '1' when Div_vector2 = (MediumDivider - 1) and CE = '1' else '0';
		
--12.5kHz signal creating(One clock cycle)	
process(CLK,CLR)
begin
	if CLR = '1' then
		Div_Vector3 <= (others=>'0');
	elsif CLK'event and CLK = '1' then
		if CE ='1' then
			if Div_Vector3 = (BigDivider -1) then
				Div_vector3<=(others=>'0');
			else
				Div_vector3<=Div_vector3 +1;
			end if;
		end if;
	end if;
end process;	
	
LoadControl <= '1' when Div_vector3 =(BigDivider -1) and CE = '1' else '0';
	
end behavioral;
